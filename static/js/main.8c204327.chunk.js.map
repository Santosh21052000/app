{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","link","onClick","togglemode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newtext","toLocaleUpperCase","showAlert","toLocaleLowerCase","charAt","toUpperCase","slice","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","toLowerCase","capitalize","msg","defaultProps","abouttext","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8c204327.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n              <a link className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link  className=\"nav-link\" to=\"/about\">{props.abouttext}</Link>\r\n              \r\n            </li> */}\r\n\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className =\"btn btn-outline-success\" type =\"submit\">Search</button>\r\n            </form> */}\r\n          <div className={`form-check form-switch text-${props.mode==='light' ? 'dark':'light'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.togglemode} id=\"flexSwitchCheckDefault\" />\r\n            <label className =\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  abouttext: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  abouttext: 'About'\r\n}\r\n","import React,{useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick=()=>{\r\n       \r\n        let newtext=text.toLocaleUpperCase();\r\n        setText(newtext);\r\n        props.showAlert('converted to uppercase','success');\r\n    }\r\n    const handleLoClick=()=>{\r\n       \r\n        let newtext=text.toLocaleLowerCase();\r\n        setText(newtext);\r\n        props.showAlert('converted to lowercase','success');\r\n    }\r\n    const handleClClick=()=>{\r\n       \r\n        let newtext='';\r\n        setText(newtext);\r\n        props.showAlert('clearing text','success');\r\n    }\r\n    const Capitalizer=()=>{\r\n        setText(text.charAt(0).toUpperCase() + text.slice(1));\r\n        props.showAlert('capitalising first letter','success');\r\n    }\r\n    const handleCopy=()=>{\r\n        var text=document.getElementById('mybox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert('coping to clipboard','success');\r\n    }\r\n    const remExtSpace=()=>{\r\n        let newtext=text.split(/[ ]+/);\r\n        setText(newtext.join(' '))\r\n        props.showAlert('removing extra spaces','success');\r\n    }\r\n\r\n    const handleOnChange=(event)=>{\r\n        \r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('');\r\n    \r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark' ? 'white':'black'}} >\r\n            <h1 className=\"text-center\">{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" \r\n                value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark' ? 'grey':'white', color: props.mode==='dark' ? 'white':'black'}} id=\"mybox\" rows=\"10\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-dark\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n            <button className=\"btn btn-dark mx-3\" onClick={handleLoClick}>Convert To Lowercase</button>\r\n            <button className=\"btn btn-dark mx-3\" onClick={handleClClick}>Clear the text</button>\r\n            <button className=\"btn btn-dark mx-3\" onClick={Capitalizer}>Capitalize first character</button>\r\n            <button className=\"btn btn-dark mx-3\" onClick={handleCopy}>Copy to clipboard</button>\r\n            <button className=\"btn btn-dark mx-3 my-3\" onClick={remExtSpace}>Remove extra spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode==='dark' ? 'white':'black'}}>\r\n            <h1>your text summary</h1>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008*text.split(\" \").length} minutes to read(reference 25word/min)</p>\r\n            <h2>preview</h2>\r\n            <p>{text.length>0 ? text : \"Enter your text above to preview\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n           \r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route//,\n//   //Link\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const togglemode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#0a0039';\n      showAlert('dark mode has been enabled', 'success');\n      //  document.title='TextUtils-Dark Mode';\n      //  setInterval(() => {\n      //   document.title='TextUtils is amaging app';\n      //  }, 2000);\n      //  setInterval(() => {\n      //   document.title='install TextUtils';\n      //  }, 1500);\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('light mode has been enabled', 'success');\n      // document.title='TextUtils-Light Mode';\n    }\n\n  }\n  return (\n    <>\n      {/* <Navbar title=\"TextUtils3\" abouttext=\"About TextUtils\"/> */}\n      {/* <Navbar /> */}\n      {/* <Router> */}\n        <Navbar title=\"TextUtils\" mode={mode} togglemode={togglemode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Switch>\n            <Route exact path=\"/about\"> \n              <About />\n            </Route> */}\n\n            {/* <Route exact path=\"/\"> */}\n              <TextForm showAlert={showAlert} heading=\"Enter the text to analyse\" mode={mode} />\n            {/* </Route>\n          </Switch> */}\n\n          {/* <About /> */}\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}